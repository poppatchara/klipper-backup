############################################################################
# [Mainsail]
############################################################################

[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
gcode:
  PAUSE_BASE
  _TOOLHEAD_PARK_PAUSE_CANCEL

[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
  ##### read extrude from  _TOOLHEAD_PARK_PAUSE_CANCEL  macro #####
  {% set extrude = printer['gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL'].extrude %}
  #### get VELOCITY parameter if specified ####
  {% if 'VELOCITY' in params|upper %}
    {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
  {%else %}
    {% set get_params = "" %}
  {% endif %}
  ##### end of definitions #####
  {% if printer.extruder.can_extrude|lower == 'true' %}
    M83
    G1 E{extrude} F2100
    {% if printer.gcode_move.absolute_extrude |lower == 'true' %} M82 {% endif %}
  {% else %}  
    RESPOND TYPE=command MSG="Extruder not hot enough"
  {% endif %}  
  RESUME_BASE {get_params}

[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
variable_park: True
gcode:
  ## Move head and retract only if not already in the pause state and park set to true
  {% if printer.pause_resume.is_paused|lower == 'false' and park|lower == 'true'%}
    _TOOLHEAD_PARK_PAUSE_CANCEL
  {% endif %}
  TURN_OFF_HEATERS
  CANCEL_PRINT_BASE

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description: Helper: park toolhead used in PAUSE and CANCEL_PRINT
variable_extrude: 1.0
gcode:
  ##### set park positon for x and y #####
  # default is your max posion from your printer.cfg
  {% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
  {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
  {% set z_park_delta = 2.0 %}
  ##### calculate save lift position #####
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% if act_z < (max_z - z_park_delta) %}
    {% set z_safe = z_park_delta %}
  {% else %}
    {% set z_safe = max_z - act_z %}
  {% endif %}
  ##### end of definitions #####
  {% if printer.extruder.can_extrude|lower == 'true' %}
    M83
    G1 E-{extrude} F2100
    {% if printer.gcode_move.absolute_extrude |lower == 'true' %} M82 {% endif %}
  {% else %}
    RESPOND TYPE=command MSG="Extruder not hot enough"
  {% endif %}
  {% if "xyz" in printer.toolhead.homed_axes %}
    G91
    G1 Z{z_safe} F900
    G90
    G1 X{x_park} Y{y_park} F6000
    {% if printer.gcode_move.absolute_coordinates|lower == 'false' %} G91 {% endif %}
  {% else %}
    RESPOND TYPE=command MSG="Printer not homed"
  {% endif %}

[gcode_macro QGL]
description: "shortcut for quad gantry leveling"
gcode:
  STATUS_LEVELING
  QUAD_GANTRY_LEVEL
  STATUS_READY

[gcode_macro QUAD_GANTRY_LEVEL]
rename_existing: _QUAD_GANTRY_LEVEL
variable_qgl_accel = 10000
variable_homing:False
gcode:
  SET_GCODE_VARIABLE MACRO=G28 VARIABLE=homing VALUE=True
  {% set pre_qgl_accel = printer.toolhead.max_accel |int %}
  RESPOND TYPE=command MSG="[QGL] - Accel before homing = {pre_qgl_accel}"  
  {% if pre_qgl_accel < qgl_accel %}
    RESPOND TYPE=command MSG="[QGL] - Accel is too low. Set to {qgl_accel}"
    SET_VELOCITY_LIMIT ACCEL={qgl_accel}
  {% endif %}
  _QUAD_GANTRY_LEVEL
  SET_VELOCITY_LIMIT ACCEL={pre_qgl_accel}

  SET_GCODE_VARIABLE MACRO=G28 VARIABLE=homing VALUE=False

[gcode_macro G32]
variable_homing:False
gcode:
    status_homing #led
    SAVE_GCODE_STATE NAME=STATE_G32
    G90
    STATUS_HOMING
    G28
    {% if not printer.quad_gantry_level.applied %} 
      STATUS_LEVELING
      QUAD_GANTRY_LEVEL
      # G4 P200
      # G1 X250  Y100 F5000  ;Move a little
      STATUS_HOMING
      G28
    {% endif %}

    G0 X150 Y150 Z30 F3600
    STATUS_READY

    #--------------------------------------------------------------------
    RESTORE_GCODE_STATE NAME=STATE_G32
    
[gcode_macro G28]
rename_existing: G0028
variable_homing:False
variable_homing_accel: 8000
gcode:

  {% set pre_home_accel = printer.toolhead.max_accel |int %}
  RESPOND TYPE=command MSG="[HOMING] - Accel before homing = {pre_home_accel}"  
  {% if pre_home_accel < homing_accel %}
    RESPOND TYPE=command MSG="[HOMING] - Homing accel is too low. Set to {homing_accel}"
    SET_VELOCITY_LIMIT ACCEL={homing_accel}
  {% endif %}

  SET_GCODE_VARIABLE MACRO=G28 VARIABLE=homing VALUE=True


  {% if params.X is not defined and params.Y is not defined and params.Z is not defined %}
    G0028 X0 
    # Move X away
    G91
    G1 X-10 F1200
    # Wait just a second… (give StallGuard registers time to clear)
    G4 P1000
    G90
    G0028 Y0 Z0
  {% else %}
    {% if params.X is defined and params.Y is defined and params.Z is not defined %}
      G0028 X0 
      # Move X away
      G91
      G1 X-10 F1200
      # Wait just a second… (give StallGuard registers time to clear)
      G4 P1000
      G90
      G0028 Y0
    {% else %}
      {% if params.X is defined %}
        G0028 X0
        # Move X away
        G91
        G1 X-10 F1200
        # Wait just a second… (give StallGuard registers time to clear)
        G4 P1000
        G90
      {% endif %}
      {% if params.Y is defined %}
        G0028 Y0
      {% endif %}
      {% if params.Z is defined %}
        G0028 Z0
      {% endif %}
    {% endif %}
  {% endif %}

  SET_GCODE_VARIABLE MACRO=G28 VARIABLE=homing VALUE=False
  SET_VELOCITY_LIMIT ACCEL={pre_home_accel}





############################################################################
# [ PRINT_START / [ PRINT_END]
############################################################################

[gcode_macro _PRIME_LINE]
description: Priming line on the left
gcode:
    {% set start_x =  10  |float %}        # Line Start X
    {% set start_y =  1  |float %}        # Line Start Y
    {% set dist =  200 |float %}          # Line End X
    {% set offset = -0.5 |float %}        # offset to second line

    G92 E0                              ;Reset Extruder
    G90                                 ;Absolute Position
    G1 Z2.0 F1500                       ;Move Z Axis up
    G1 X{start_x} Y{start_y}  F9000     ;Move to start position
    G1 Z0.4 F1500                       ;Drop head to print level
    G1 X{start_x+dist}   F1500.0 E30    ;Draw the first line (move X to end)
    G1 Y{start_y+offset} F9000          ;Move to side a little
    G1 X{start_x}        F1500.0 E40    ;Draw the second line
    G1 Z1   F2000                       ;Move Z Axis Up
    G1 X{start_x+(dist*0.45)} F9000     ;Wipe
    G91
    G92 E0
    G1 E-4                              ;retract
    G92 E0                              ;Reset Extruder

[gcode_macro _PRINT_START]
gcode:        
    # Parameters
    {% set bedtemp = params.BED|int %}
    {% set extrudertemp = params.EXTRUDER|int %}
    {% set chambertemp = params.CHAMBER|default(0)|int %}
    {% set material = params.MATERIAL|default("PLA")|string %}
    {% set restX = 50|float %}
    {% set restY = 15|float %}
    {% set profile_name = "default"|string %}

    CLEAR_PAUSE   ; Clear any queue or paused
    UPDATE_DELAYED_GCODE ID=_delay_extruder_off DURATION=0
    UPDATE_DELAYED_GCODE ID=_delay_bed_off      DURATION=0
    UPDATE_DELAYED_GCODE ID=_delay_motors_off   DURATION=0
    M106 S255     ; Fan Full
    {% if printer.extruder.temperature < 155 
    or printer.heater_bed.temperature < 65 
    or printer.extruder.temperature > 155 %}
      {% if bedtemp > 60 %}
        RESPOND TYPE=command MSG="Setting Probing Environment: 155c E/ {bedtemp}c B"    
        SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={bedtemp}
        SET_HEATER_TEMPERATURE HEATER=extruder TARGET=155
        M109 S155 ; Extruder
        M190 S{bedtemp}  ; Bed
      {% else %}
        RESPOND TYPE=command MSG="Setting Probing Environment: 155c E/ 60c B"    
        SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=60
        SET_HEATER_TEMPERATURE HEATER=extruder TARGET=155
        M109 S155 ; Extruder
        M190 S60  ; Bed
        {% endif %}
    {% else %}
      RESPOND TYPE=command MSG="Probing Environment within range: {printer.extruder.temperature}c Extruder/ {printer.heater_bed.temperature}c Bed"   
    {% endif %}

            
    status_homing
    RESPOND TYPE=command MSG="Homing"
    G28                   

    status_leveling
    RESPOND TYPE=command MSG="QGL"
    QUAD_GANTRY_LEVEL
    RESPOND TYPE=command MSG="Home margin"
    G90
    # G1 X250  Y100 Z15.008 F5000   ;Move a little
    G1 X250  Y100 F5000 
    M400 P400
    status_homing
    G28
    
    M106 S0 ; Fan off for faster heating

    G92 E0  ;Reset Extruder
    
    RESPOND TYPE=command MSG="Setting [BED] = {bedtemp}c"
    RESPOND TYPE=command MSG="Setting [NOZZLE] = 155c"
    
    #Set Temperature
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={bedtemp}
    # SET_HEATER_TEMPERATURE HEATER=extruder TARGET={extrudertemp}

    {% if chambertemp > 0 %}
    RESPOND TYPE=command MSG="Setting [CHAMBER] = {chambertemp}"
        # SET_HEATER_TEMPERATURE HEATER=extruder TARGET={extrudertemp}
    {% endif %}

    #KAMP
    RESPOND TYPE=command MSG="[KAMPing] - START"
    SETUP_KAMP_MESHING DISPLAY_PARAMETERS=1 LED_ENABLE=1 FUZZ_ENABLE=1 MARGIN_ENABLE=0 PROBE_DOCK_ENABLE=0
    BED_MESH_CALIBRATE
    RESPOND TYPE=command MSG="[KAMPing] - DONE\n"
    # {% set excluded = printer.exclude_object.objects %}
    # {% if excluded %}
    #   RESPOND TYPE=command MSG="[KAMPing] - START"
    #   SETUP_KAMP_MESHING DISPLAY_PARAMETERS=1 LED_ENABLE=1 FUZZ_ENABLE=1 MARGIN_ENABLE=0 PROBE_DOCK_ENABLE=0
    #   BED_MESH_CALIBRATE
    #   RESPOND TYPE=command MSG="[KAMPing] - DONE\n"
    # {% else %}
    #   RESPOND TYPE=command MSG="No Object Exclude feature in gcode, using default mesh"
    #   #Bed Profile
    #   {% if material == "ABS" %}
    #     {% set profile_name = "ABS"%}
    #   {% endif %}
    #   RESPOND TYPE=command MSG="Loading Mesh Profile \"{profile_name}\""
    #   BED_MESH_PROFILE LOAD={profile_name}
    # {% endif %}


    # Wait temperatures
    RESPOND TYPE=command MSG="Moving to waiting position."
    G1 X{restX} Y{restY} F3500            ; Move to waiting position
    G1 Z20 F1500

    {% if printer.heater_bed.temperature < bedtemp %}
      RESPOND TYPE=command MSG="Waiting Bed Temperature............"
      status_heating
      M190 S{bedtemp}    ; wait for bed temp
    {% else %}
      RESPOND TYPE=command MSG="Bed Temp Satified, continue."    
    {% endif %}

    {% if chambertemp > 0 %}      ; set chember only if defined
      {% if printer.chamber.temperature < chambertemp %}
        RESPOND TYPE=command MSG="Waiting Chamber Temperature............"
        status_heating
        TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={chambertemp}
      {% endif %}
    {% else %}
      RESPOND TYPE=command MSG="Chamber Temp Satified, continue."
    {% endif %}

    {% if printer.extruder.temperature != extrudertemp %}
      #set extruder temp to printing temp
      RESPOND TYPE=command MSG="Setting [NOZZLE] = {extrudertemp}c"
      SET_HEATER_TEMPERATURE HEATER=extruder TARGET={extrudertemp}
      RESPOND TYPE=command MSG="Waiting Extruder Temperature............"
      status_heating
      M109 S{extrudertemp}       ; set & wait for hotend temp
    {% else %}
      RESPOND TYPE=command MSG="Nozzle Temp Satified, continue."
    {% endif %}
    status_busy
    #insert brush here
    RESPOND TYPE=command MSG=" "
    RESPOND TYPE=command MSG="Prime Line"
    _PRIME_LINE                   ; Macro Prime Line
    # RESPOND TYPE=command MSG="[KAMP] - Line Purge"
    # G90 
    # SETUP_LINE_PURGE line_length=60 flow_rate=24 
    # LINE_PURGE 
    G90                           ; absolute positioning
    G92 E0
    G1 Z3 F1000
    RESPOND TYPE=command MSG=" "
    RESPOND TYPE=command MSG=" STARTING PRINT "
    RESPOND TYPE=command MSG=" "

    STATUS_PRINTING


[gcode_macro _PRINT_END]
gcode: 
    status_busy
    # TURN_OFF_HEATERS
    #Determine z safe
    {% set current_z = printer.toolhead.position.z|float %}
    {% set max_z = printer.toolhead.axis_maximum.z|float %}
    {% set hop_z = current_z + 5|float %}

    #prevent head crashing into prints
    {% if hop_z > 155 %}
        {% set z_safe = (hop_z + 5) %}  
    {% else %}
        {% set z_safe = 155 %}
    {% endif %}

    #prevent gantry hit
    {% if z_safe > max_z %}
        {% set z_safe = max_z %} 
    {% endif %}

    G92 E0
    #Quick hop and retract
    {% if hop_z < max_z %}
        G1 E-4 Z{hop_z} F9000
        # G1 Z{hop_z} F9000
    {% else %}
        G1 E-4 F9000
    {% endif %}

    G1 Z{z_safe} F5000      ; Clear print piece
    G1 X290 Y290 F9000      ; Move to park and present print

    #delay gcode to turn off later
    RESPOND TYPE=command MSG=" [Print Done.] "
    RESPOND TYPE=command MSG="    - Delay Extruder Off 30 sec"
    RESPOND TYPE=command MSG="    - Delay Bed Off 10 min"
    RESPOND TYPE=command MSG="    - Delay Motors Off 30 min"
    RESPOND TYPE=command MSG="    - Delay Lights Status 30 min"
    UPDATE_DELAYED_GCODE ID=_delay_extruder_off DURATION=30
    UPDATE_DELAYED_GCODE ID=_delay_bed_off      DURATION=600
    UPDATE_DELAYED_GCODE ID=_delay_motors_off   DURATION=18003

    STATUS_PART_READY

[delayed_gcode _delay_extruder_off]
gcode:
  {% if printer.print_stats.state != "printing" %}
      M104 S0 ; turn off hotend 
      RESPOND TYPE=command MSG="Extruder Heater off after 30 sec"
  {% endif %}
[delayed_gcode _delay_bed_off]
gcode:
  {% if printer.print_stats.state != "printing" %}
      M140 S0 ; turn off bed heater
      RESPOND TYPE=command MSG="Bed Heater off after 10 min"
  {% endif %}
[delayed_gcode _delay_motors_off]
gcode:
  {% if printer.print_stats.state != "printing" %}
      M18 ; turn off stepper motors
      RESPOND TYPE=command MSG="Motors off after 30 min"
  {% endif %}

[gcode_macro printer_state]
gcode:
  {% set stat = printer.print_stats.state|string %}
  RESPOND TYPE=command MSG="Current Printer State = {stat}"




############################################################################
# [ USER MACROS ]
############################################################################

# [gcode_macro test_exclude]
# gcode:
#   {% set all = printer.exclude_object.objects %}
#   RESPOND TYPE=command MSG="all = {all}"
#   {% if all %}
#     RESPOND TYPE=command MSG="TRUE"
#   {% endif%}

[gcode_macro PARK_MID]
#park at center
gcode:
  G90
  {% set current_z = printer.toolhead.position.z|float %}
  {% set max_z = printer.toolhead.axis_maximum.z|float %}

  #prevent head crashing into prints
  # {% if current_z > 150 %}
  #     {% set z_safe = (current_z + 5) %}
  # {% else %}
  #     {% set z_safe = 150 %}
  # {% endif %}

  {% set z_safe = (current_z + 5) %}

  #prevent gantry hit
  {% if z_safe > max_z %}
      {% set z_safe = max_z %} 
  {% endif %}

  G1 Z{z_safe} F2000
  G1 X150 Y150 F8000

[gcode_macro PARK_BACK]
#park at the back
gcode:
  G90
  {% set current_z = printer.toolhead.position.z|float %}
  {% set max_z = printer.toolhead.axis_maximum.z|float %}

  #prevent head crashing into prints
  {% if current_z > 50 %}
      {% set z_safe = (current_z + 5) %}
  {% else %}
      {% set z_safe = 50 %}
  {% endif %}

  #prevent gantry hit
  {% if z_safe > max_z %}
      {% set z_safe = max_z %} 
  {% endif %}

  G1 X0 Y305 Z{z_safe} F8000

[gcode_macro PARK_00]
#park at the back
gcode:
  G90
  {% set current_z = printer.toolhead.position.z|float %}
  {% set max_z = printer.toolhead.axis_maximum.z|float %}

  #prevent head crashing into prints
  {% if current_z > 50 %}
      {% set z_safe = (current_z + 5) %}
  {% else %}
      {% set z_safe = 50 %}
  {% endif %}

  #prevent gantry hit
  {% if z_safe > max_z %}
      {% set z_safe = max_z %} 
  {% endif %}

  G1 Z{z_safe} F5000
  G1 X0 Y0 F8000

[gcode_macro PARK_SERVICE]
#park at the back
gcode:
  G90
  {% set current_z = printer.toolhead.position.z|float %}
  {% set max_z = printer.toolhead.axis_maximum.z|float %}

  #prevent head crashing into prints
  {% if current_z > 200 %}
      {% set z_safe = (current_z + 5) %}
  {% else %}
      {% set z_safe = 200 %}
  {% endif %}

  #prevent gantry hit
  {% if z_safe > max_z %}
      {% set z_safe = max_z %} 
  {% endif %}

  G1 Z{z_safe} F5000
  G1 X150 Y1 F8000

[gcode_macro WAIT]
gcode:
    {% set wait_time = params.TIME|default(0)| int %}
    RESPOND TYPE=command MSG="Waiting for {wait_time} seconds"
    {% if wait_time > 60 %}
        {% set nrepeat = wait_time/10 %}
        {% for i in range(nrepeat|round(0,'ceil')|int) %}
            RESPOND TYPE=command MSG="{wait_time-(i*10)} seconds left of {wait_time} seconds"
            {% if wait_time-(i*10) < 10 %}
              G4 P{(wait_time-(i*10))*1000}
            {% else %}
              G4 P{10*1000}
            {% endif %}
        {% endfor %}
    {% else %}
        G4 P{wait_time*1000}
    {% endif%}
    RESPOND TYPE=command MSG="Done Waiting"

[gcode_macro COLD_START]
gcode:
  {% set soak_time = params.TIME|default(1800)| int %}
  {% set soak_temp = params.TEMP|default(65)| int %}
  {% if soak_time > 60 %}
    RESPOND TYPE=command MSG="Heat Soaking bed to {soak_temp}c over {soak_time/60} min"
  {% else %}
    RESPOND TYPE=command MSG="Heat Soaking bed to {soak_temp}c over {soak_time} sec"
  {% endif %}

  M190 S{soak_temp}
  WAIT TIME={soak_time}
  G32

  RESPOND TYPE=command MSG="Cold Start Done"

[gcode_macro ABS_HEATSOAK]
variable_soak_time : 1800            #how long to heat soak
variable_bed_temp : 110         #bed temp
variable_extruder_temp : 270    #extruder temp
gcode:
  RESPOND TYPE=command MSG="[ABS Heat Soak] - Starting Heatsoak Procedure"
  {% if "xyz" not in printer.toolhead.homed_axes or not printer.quad_gantry_level.applied %}
    RESPOND TYPE=command MSG="[ABS HeatSoak] - Printer not homed"
    G32
  {% endif %}

  #Set temp
  SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={bed_temp}
  SET_HEATER_TEMPERATURE HEATER=extruder TARGET={extruder_temp}

  #fan 
  M106 S255 #fan full

  #start soak 
  COLD_START TIME={soak_time} TEMP={bed_temp}

  #when done
  SET_HEATER_TEMPERATURE HEATER=extruder TARGET=155   #set to probe temp
  STATUS_READY
  set_caselight_leds_max
