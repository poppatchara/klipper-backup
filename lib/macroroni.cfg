############################################################################
# User Variables
############################################################################
[gcode_macro _SETTINGS]
variable_cpap: True
variable_cpap_cooling_speed: 0.4 
gcode:

############################################################################
# HOMING
############################################################################

[gcode_macro QGL]
description: "shortcut for quad gantry leveling"
gcode:      
  STATUS_LEVELING
  _CheckProbe action=attach     #safety check
  QUAD_GANTRY_LEVEL
  STATUS_READY

[gcode_macro _SafeTemp]
description: safe temp for klicky
variable_probe_temp: 100
gcode: 
  {% set MAX_TEMP = probe_temp + 5 %}
  {% set ACTUAL_TEMP = printer.extruder.temperature %}
  {% set TARGET_TEMP = printer.extruder.target %}
  {% set ACTUAL_HEATER_FAN = printer.fan.speed %}

  {% if TARGET_TEMP > probe_temp %}
      { action_respond_info('[SafeTemp] - Extruder temperature target of %.1fC is too high for magnet, lowering to %.1fC' % (TARGET_TEMP, probe_temp)) }
      STATUS_COOLING
      {% if printer["gcode_macro _SETTINGS"].cpap == true %}
        M106 S{printer["gcode_macro _SETTINGS"].cpap_cooling_speed*255}
      {% else %}
        M106 S255
      {% endif %}
      M109 S{ probe_temp }
      M106 S{ ACTUAL_HEATER_FAN }
  {% else %}
      # Temperature target is already low enough, but nozzle may still be too hot.
      {% if ACTUAL_TEMP > MAX_TEMP %}
          { action_respond_info('[SafeTemp] - Extruder temperature %.1fC is still too high for magnet, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }
          STATUS_COOLING
          {% if printer["gcode_macro _SETTINGS"].cpap == true %}
            M106 S{printer["gcode_macro _SETTINGS"].cpap_cooling_speed*255}
          {% else %}
            M106 S255
          {% endif %}
          TEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }
          M106 S{ ACTUAL_HEATER_FAN }
      {% endif %}
  {% endif %}

[gcode_macro G32]
variable_store_temp:True
variable_ignore_home_hop:False
gcode:
  _User_Variables
  SET_GCODE_VARIABLE MACRO=G32 VARIABLE=ignore_home_hop VALUE={ False }    ;make sure correct initial value
  {% set target_temp = printer.extruder.target %} 
  {% set zhop = printer["gcode_macro _User_Variables"].zhop %}

  status_homing #led
  G90
  #if z not homed and z is too low, hop
  {% if "xyz" not in printer.toolhead.homed_axes %}
    RESPOND TYPE=command MSG="[G32] - Z not Homed, move for safety."
    #hop start
    SET_KINEMATIC_POSITION Z=0
    G91
    G1 Z{zhop} F1500
    G90
    #hop end
  {% else %}
    {% if printer.toolhead.position.z < 20 %}
      RESPOND TYPE=command MSG="[G32] - Z Homed, but position too low, move for safety."
      G90
      G1 Z20 F1500
    {% endif %}
  {% endif %}

  #If probe attaced since powered off, zhop for safety
  _CheckProbe action=query 
  # Get probe attach status
  {% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}
  {% if probe_attached %}
    RESPOND TYPE=command MSG="[G32] - Probe already attache, move for safety."
    #hop start
    SET_KINEMATIC_POSITION Z=0
    G91
    G1 Z{zhop} F1500
    G90
    #hop end
  {% endif %}
  G28 X Y

  SET_GCODE_VARIABLE MACRO=G32 VARIABLE=ignore_home_hop VALUE={ True }
  Attach_Probe_Lock
  G4 P1000
  G28 Z
  {% if not printer.quad_gantry_level.applied %} 
    _CheckProbe action=query 
    _CheckProbe action=attach     #safety check
    STATUS_LEVELING
    QUAD_GANTRY_LEVEL 
    G28
  {% endif %}

  Dock_Probe_Unlock

  G0 X150 Y150 Z30 F3600
  STATUS_READY
  set_caselight_leds_max

  {% if target_temp > 0 and store_temp %} #there was target temp before 
    M104 S{target_temp} T0 
    RESPOND TYPE=command MSG="[G32] - {target_temp}c Extruder target restored " 
  {% endif %}

  SET_GCODE_VARIABLE MACRO=G32 VARIABLE=ignore_home_hop VALUE={ False }

############################################################################
# [ PRINT_START / [ PRINT_END]
############################################################################

[gcode_macro _PRINT_START]
gcode:        
    # Parameters
    {% set probetemp = printer["gcode_macro _SafeTemp"].probe_temp %}
    {% set bedtemp = params.BED|int %}
    {% set extrudertemp = params.EXTRUDER|int %}
    {% set chambertemp = params.CHAMBER|default(0)|int %}
    {% set material = params.MATERIAL|default("PLA")|string %}
    {% set restX = 50|float %}
    {% set restY = 15|float %}
    {% set profile_name = "default"|string %}

    CLEAR_PAUSE   ; Clear any queue or paused
    UPDATE_DELAYED_GCODE ID=_delay_extruder_off DURATION=0
    UPDATE_DELAYED_GCODE ID=_delay_bed_off      DURATION=0
    UPDATE_DELAYED_GCODE ID=_delay_motors_off   DURATION=0
    # M106 S255     ; Fan Full
    {% if printer.extruder.temperature < probetemp 
    or printer.heater_bed.temperature < 65 
    or printer.extruder.temperature > probetemp %}
      {% if bedtemp > 60 %}
        RESPOND TYPE=command MSG="Setting Probing Environment: {probetemp}c E/ {bedtemp}c B"    
        SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={bedtemp}
        SET_HEATER_TEMPERATURE HEATER=extruder TARGET={probetemp}
        M109 S{probetemp} ; Extruder
        M190 S{bedtemp}  ; Bed
      {% else %}
        RESPOND TYPE=command MSG="Setting Probing Environment: {probetemp}c E/ 60c B"    
        SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=60
        SET_HEATER_TEMPERATURE HEATER=extruder TARGET={probetemp}
        M109 S{probetemp} ; Extruder
        M190 S60  ; Bed
        {% endif %}
    {% else %}
      RESPOND TYPE=command MSG="Probing Environment within range: {printer.extruder.temperature}c Extruder/ {printer.heater_bed.temperature}c Bed"   
    {% endif %}

    status_homing
    RESPOND TYPE=command MSG="Homing"
    G28 X Y       

    RESPOND TYPE=command MSG="Attach_Probe_Lock" 
    Attach_Probe_Lock    
    G4 P2000

    G28 Z       

    status_leveling
    RESPOND TYPE=command MSG="QGL"
    _CheckProbe action=attach     #safety check
    QUAD_GANTRY_LEVEL
    # RESPOND TYPE=command MSG="Home margin"
    G90

    status_homing
    _CheckProbe action=attach     #safety check

    M106 S0 ; Fan off for faster heating
    G92 E0  ;Reset Extruder
    
    RESPOND TYPE=command MSG="Setting [BED] = {bedtemp}c"
    RESPOND TYPE=command MSG="Setting [NOZZLE] = {probetemp}c"
    
    #Set Temperature
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={bedtemp}
    # SET_HEATER_TEMPERATURE HEATER=extruder TARGET={extrudertemp}

    {% if chambertemp > 0 %}
    RESPOND TYPE=command MSG="Setting [CHAMBER] = {chambertemp}"
        # SET_HEATER_TEMPERATURE HEATER=extruder TARGET={extrudertemp}
    {% endif %}

    #KAMP
    _CheckProbe action=attach     #safety check
    RESPOND TYPE=command MSG="[KAMP] - START"
    _KAMP_Settings probe_dock_enable=1 
    # SETUP_KAMP_MESHING DISPLAY_PARAMETERS=1 LED_ENABLE=1 FUZZ_ENABLE=1 MARGIN_ENABLE=0 PROBE_DOCK_ENABLE=1
    BED_MESH_CALIBRATE
    RESPOND TYPE=command MSG="[KAMP] - DONE"

    #Last home Z
    G28 Z 

    Dock_Probe_Unlock

    # Wait temperatures
    RESPOND TYPE=command MSG="Moving to waiting position."
    # G1 X{restX} Y{restY} F3500            ; Move to waiting position
    # G1 Z20 F1500
    SMART_PARK  ;From KAMP

    {% if printer.heater_bed.temperature < bedtemp %}
      RESPOND TYPE=command MSG="Waiting Bed Temperature............"
      status_heating
      M190 S{bedtemp}    ; wait for bed temp
    {% else %}
      RESPOND TYPE=command MSG="Bed Temp Satified, continue."    
    {% endif %}

    {% if chambertemp > 0 %}      ; set chember only if defined
      {% if printer.chamber.temperature < chambertemp %}
        RESPOND TYPE=command MSG="Waiting Chamber Temperature............"
        status_heating
        TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={chambertemp}
      {% endif %}
    {% else %}
      RESPOND TYPE=command MSG="Chamber Temp Satified, continue."
    {% endif %}

    {% if printer.extruder.temperature != extrudertemp %}
      #set extruder temp to printing temp
      RESPOND TYPE=command MSG="Setting [NOZZLE] = {extrudertemp}c"
      SET_HEATER_TEMPERATURE HEATER=extruder TARGET={extrudertemp}
      RESPOND TYPE=command MSG="Waiting Extruder Temperature............"
      status_heating
      M109 S{extrudertemp}       ; set & wait for hotend temp
    {% else %}
      RESPOND TYPE=command MSG="Nozzle Temp Satified, continue."
    {% endif %}
    status_busy
    #insert brush here

    RESPOND TYPE=command MSG=" "
    RESPOND TYPE=command MSG="Line Purge"

    # _PRIME_LINE                   ; Macro Prime Line
    _KAMP_Settings purge_amount=50 flow_rate=25 
    LINE_PURGE                    ; From KAMP

    G90                           ; absolute positioning
    G92 E0
    G1 Z3 F1000

    _CheckProbe action=dock     #safety check

    RESPOND TYPE=command MSG=" "
    RESPOND TYPE=command MSG=" STARTING PRINT "
    RESPOND TYPE=command MSG=" "

    STATUS_PRINTING


[gcode_macro _PRINT_END]
gcode: 
    status_busy
    # TURN_OFF_HEATERS
    #Determine z safe
    {% set current_z = printer.toolhead.position.z|float %}
    {% set max_z = printer.toolhead.axis_maximum.z|float %}
    {% set hop_z = 5|float %} #relative

    #prevent head crashing into prints
    {% if hop_z > 155 %}
        {% set z_safe = (hop_z + 5) %}  
    {% else %}
        {% set z_safe = 155 %}
    {% endif %}

    #prevent gantry hit
    {% if z_safe > max_z %}
        {% set z_safe = max_z %} 
    {% endif %}

    G92 E0
    G91 #relative
    #Quick hop and retract
    {% if hop_z < max_z %}
        G1 E-5 Z1 F9000     #retract and hop 1mm
        G1 Z{hop_z-1} F9000
    {% else %}
        G1 E-4 F9000
    {% endif %}
    G90

    G0 Z{z_safe} F5000      ; Clear print piece
    G0 X290 Y290 F9000      ; Move to park and present print

    BED_MESH_CLEAR

    #delay gcode to turn off later
    RESPOND TYPE=command MSG=" [Print Done.] "
    RESPOND TYPE=command MSG="    - Delay Extruder Off 30 sec"
    RESPOND TYPE=command MSG="    - Delay Bed Off 10 min"
    RESPOND TYPE=command MSG="    - Delay Motors Off 30 min"
    RESPOND TYPE=command MSG="    - Delay Lights Status 30 min"
    UPDATE_DELAYED_GCODE ID=_delay_extruder_off DURATION=30
    UPDATE_DELAYED_GCODE ID=_delay_bed_off      DURATION=600
    UPDATE_DELAYED_GCODE ID=_delay_motors_off   DURATION=1800

    STATUS_PART_READY
    set_caselight_leds_max

[delayed_gcode _delay_extruder_off]
gcode:
  {% if printer.print_stats.state != "printing" %}
      M104 S0 ; turn off hotend 
      RESPOND TYPE=command MSG="Extruder Heater off after 30 sec"
  {% endif %}
[delayed_gcode _delay_bed_off]
gcode:
  {% if printer.print_stats.state != "printing" %}
      M140 S0 ; turn off bed heater
      RESPOND TYPE=command MSG="Bed Heater off after 10 min"
  {% endif %}
[delayed_gcode _delay_motors_off]
gcode:
  {% if printer.print_stats.state != "printing" %}
      M18 ; turn off stepper motors
      RESPOND TYPE=command MSG="Motors off after 30 min"
  {% endif %}

[gcode_macro printer_state]
gcode:
  {% set stat = printer.print_stats.state|string %}
  RESPOND TYPE=command MSG="Current Printer State = {stat}"

############################################################################
# [ USER MACROS ]
############################################################################

[gcode_macro _DebugPrint]
gcode:
    {% set message  = params.MSG %}
    {% set debug  = params.DEBUG %}

    {% if debug %}
        { action_respond_info(message) }
    {% endif %}

[gcode_macro PARK_MID]
#park at center
gcode:
  G90
  {% set current_z = printer.toolhead.position.z|float %}
  {% set max_z = printer.toolhead.axis_maximum.z|float %}

  {% set z_safe = (current_z + 5) %}

  #prevent gantry hit
  {% if z_safe > max_z %}
      {% set z_safe = max_z %} 
  {% endif %}

  G1 Z{z_safe} F2000
  G1 X150 Y150 F8000

[gcode_macro PARK_BACK]
#park at the back
gcode:
  G90
  {% set current_z = printer.toolhead.position.z|float %}
  {% set max_z = printer.toolhead.axis_maximum.z|float %}

  #prevent head crashing into prints
  {% if current_z > 50 %}
      {% set z_safe = (current_z + 5) %}
  {% else %}
      {% set z_safe = 50 %}
  {% endif %}

  #prevent gantry hit
  {% if z_safe > max_z %}
      {% set z_safe = max_z %} 
  {% endif %}

  G1 X0 Y305 Z{z_safe} F8000

[gcode_macro PARK_00]
#park at the back
gcode:
  G90
  {% set current_z = printer.toolhead.position.z|float %}
  {% set max_z = printer.toolhead.axis_maximum.z|float %}

  #prevent head crashing into prints
  {% if current_z > 50 %}
      {% set z_safe = (current_z + 5) %}
  {% else %}
      {% set z_safe = 50 %}
  {% endif %}

  #prevent gantry hit
  {% if z_safe > max_z %}
      {% set z_safe = max_z %} 
  {% endif %}

  G1 Z{z_safe} F5000
  G1 X0 Y0 F8000

[gcode_macro PARK_SERVICE]
#park at the back
gcode:
  G90
  {% set current_z = printer.toolhead.position.z|float %}
  {% set max_z = printer.toolhead.axis_maximum.z|float %}

  #prevent head crashing into prints
  {% if current_z > 200 %}
      {% set z_safe = (current_z + 5) %}
  {% else %}
      {% set z_safe = 200 %}
  {% endif %}

  #prevent gantry hit
  {% if z_safe > max_z %}
      {% set z_safe = max_z %} 
  {% endif %}

  G1 Z{z_safe} F5000
  G1 X150 Y1 F8000

[gcode_macro PARK_LOAD]
#park load position
gcode:
  G90
  {% set current_z = printer.toolhead.position.z|float %}
  {% set max_z = printer.toolhead.axis_maximum.z|float %}

  #prevent head crashing into prints
  {% if current_z > 125 %}
      {% set z_safe = (current_z + 5) %}
  {% else %}
      {% set z_safe = 125 %}
  {% endif %}

  #prevent gantry hit
  {% if z_safe > max_z %}
      {% set z_safe = max_z %} 
  {% endif %}

  G1 Z{z_safe} F5000
  G1 X50 Y1 F8000

[gcode_macro WAIT]
gcode:
    {% set wait_time = params.TIME|default(0)| int %}
    RESPOND TYPE=command MSG="Waiting for {wait_time} seconds"
    {% if wait_time > 60 %}
        {% set nrepeat = wait_time/10 %}
        {% for i in range(nrepeat|round(0,'ceil')|int) %}
            RESPOND TYPE=command MSG="{wait_time-(i*10)} seconds left of {wait_time} seconds"
            {% if wait_time-(i*10) < 10 %}
              G4 P{(wait_time-(i*10))*1000}
            {% else %}
              G4 P{10*1000}
            {% endif %}
        {% endfor %}
    {% else %}
        G4 P{wait_time*1000}
    {% endif%}
    RESPOND TYPE=command MSG="Done Waiting"

[gcode_macro COLD_START]
gcode:
  {% set min = params.MINUTES|default(30)| int %}
  {% set sec = params.SECONDS|default(0)| int %}
  {% set soak_temp = params.TEMP|default(65)| int %}
  {% set soak_time = (min*60)+sec %}

  {% if soak_time > 60 %}
    RESPOND TYPE=command MSG="Heat Soaking bed to {soak_temp}c over {soak_time/60} min"
  {% else %}
    RESPOND TYPE=command MSG="Heat Soaking bed to {soak_temp}c over {soak_time} sec"
  {% endif %}

  M190 S{soak_temp}
  WAIT TIME={soak_time}
  G32

  RESPOND TYPE=command MSG="Cold Start Done"



[gcode_macro ABS_HEATSOAK]
variable_soak_time : 1800            #how long to heat soak
variable_bed_temp : 115         #bed temp
variable_extruder_temp : 270    #extruder temp
gcode:
  RESPOND TYPE=command MSG="[ABS Heat Soak] - Starting Heatsoak Procedure"
  {% if "xyz" not in printer.toolhead.homed_axes or not printer.quad_gantry_level.applied %}
    RESPOND TYPE=command MSG="[ABS HeatSoak] - Printer not homed"
    G32
  {% endif %}

  #Set temp
  SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={bed_temp}
  SET_HEATER_TEMPERATURE HEATER=extruder TARGET={extruder_temp}

  #fan 
  # {% if printer["gcode_macro _SETTINGS"].cpap == true %}
  #   M106 S{printer["gcode_macro _SETTINGS"].cpap_cooling_speed*255}
  # {% else %}
  #   M106 S255
  # {% endif %}

  #start soak 
  COLD_START TIME={soak_time} TEMP={bed_temp}

  #when done
  SET_HEATER_TEMPERATURE HEATER=extruder TARGET=155   #set to probe temp
  STATUS_READY
  set_caselight_leds_max










############################################################################
# OLD Unused Macros
############################################################################

# [gcode_macro _PRIME_LINE]
# description: Priming line on the left
# gcode:
#     {% set start_x =  10  |float %}         # Line Start X
#     {% set start_y =  1  |float %}          # Line Start Y
#     {% set dist =  200 |float %}            # Line End X
#     {% set offset = -0.5 |float %}          # offset to second line

#     _CheckProbe action=dock     #safety check
#     G92 E0                              ;Reset Extruder
#     G90                                 ;Absolute Position
#     G1 Z2.0 F1500                       ;Move Z Axis up
#     G1 X{start_x} Y{start_y}  F9000     ;Move to start position
#     G1 Z0.4 F1500                       ;Drop head to print level
#     G1 X{start_x+dist}   F1500.0 E30    ;Draw the first line (move X to end)
#     G1 Y{start_y+offset} F9000          ;Move to side a little
#     G1 X{start_x}        F1500.0 E40    ;Draw the second line
#     G1 Z1   F2000                       ;Move Z Axis Up
#     G1 X{start_x+(dist*0.45)} F9000     ;Wipe
#     G91
#     G92 E0
#     G1 E-4                              ;retract
#     G92 E0                              ;Reset Extruder

# [gcode_macro deploy_probe]
# description: wrapper for klicky's deploy probe 
# gcode:
#   _DeployKlickyDock

# [gcode_macro retract_probe]
# description: wrapper for klicky's retract probe 
# gcode:
#   _RetractKlickyDock

# [gcode_macro test_exclude]
# gcode:
#   {% set all = printer.exclude_object.objects %}
#   RESPOND TYPE=command MSG="all = {all}"
#   {% if all %}
#     RESPOND TYPE=command MSG="TRUE"
#   {% endif%}

# [gcode_macro G28]
# rename_existing: G0028
# variable_homing_accel: 8000
# variable_zhop: 15
# variable_store_temp:True
# gcode:
#   {% set target_temp = printer.extruder.target %} 
#   {% set pre_home_accel = printer.toolhead.max_accel |int %}
#   RESPOND TYPE=command MSG="[HOMING] - Accel before homing = {pre_home_accel}"  
#   {% if pre_home_accel < homing_accel %}
#     RESPOND TYPE=command MSG="[HOMING] - Homing accel is too low. Set to {homing_accel}"
#     SET_VELOCITY_LIMIT ACCEL={homing_accel}
#   {% endif %}

#   {% if params.X is not defined and params.Y is not defined and params.Z is not defined %}
#     #NOTE - Just G28 with no axis defined
#     #hop start
#     SET_KINEMATIC_POSITION Z=0
#     G91
#     G1 Z{zhop} F1500
#     G90
#     #hop end
#     G0028 X0 
#     # Move X away
#     G91
#     G1 X-10 F1200
#     # Wait just a second… (give StallGuard registers time to clear)
#     G4 P1000
#     G90
#     G0028 Y0 Z0
#     G1 Z{zhop} F1500
#   {% else %} #NOTE - One or More axis defined
#     {% if params.X is defined and params.Y is defined and params.Z is not defined %}
#       #NOTE - G28 XY
#       #hop start
#       SET_KINEMATIC_POSITION Z=0
#       G91
#       G1 Z{zhop} F1500
#       G90
#       #hop end
#       G0028 X0 
#       # Move X away
#       G91
#       G1 X-10 F1200
#       # Wait just a second… (give StallGuard registers time to clear)
#       G4 P1000
#       G90
#       G0028 Y0
#     {% else %}
#       {% if params.X is defined %}
#         #NOTE - G28 X
#         #hop start
#         SET_KINEMATIC_POSITION Z=0
#         G91
#         G1 Z{zhop} F1500
#         G90
#         #hop end
#         G0028 X0
#         # Move X away
#         G91
#         G1 X-10 F1200
#         # Wait just a second… (give StallGuard registers time to clear)
#         G4 P1000
#         G1 Z{zhop} F1500
#         G90
#       {% endif %}
#       {% if params.Y is defined %}
#         #NOTE - G28 Y
#         #hop start
#         SET_KINEMATIC_POSITION Z=0
#         G91
#         G1 Z{zhop} F1500
#         G90
#         #hop end
#         G0028 Y0
#       {% endif %}
#       {% if params.Z is defined %}
#         #NOTE - G28 Z
#         #hop start
#         SET_KINEMATIC_POSITION Z=0
#         G91
#         G1 Z{zhop} F1500
#         G90
#         #hop end
#         G0028 Z0
#         G1 Z{zhop} F1500
#       {% endif %}
#     {% endif %}
#   {% endif %}

#   SET_VELOCITY_LIMIT ACCEL={pre_home_accel}

#   {% if target_temp > 0 and store_temp %} #there was target temp before 
#     M104 S{target_temp} T0 
#     RESPOND TYPE=command MSG="[HOMNG] - {target_temp}c Extruder target restored " 
#   {% endif %}

# [gcode_macro CAL_Z]
# description: shortcut for calibrate_z
# gcode:
#   CALIBRATE_Z
#   G28 Z0 
#   G90

# [gcode_macro _Home_Z_]


# [gcode_macro QUAD_GANTRY_LEVEL]
# rename_existing: _QUAD_GANTRY_LEVEL
# variable_qgl_accel = 10000
# variable_store_temp:True
# gcode:
#   {% set target_temp = printer.extruder.target %} 
#   {% set pre_qgl_accel = printer.toolhead.max_accel |int %}
#   RESPOND TYPE=command MSG="[QGL] - Accel before homing = {pre_qgl_accel}"  
#   {% if pre_qgl_accel < qgl_accel %}
#     RESPOND TYPE=command MSG="[QGL] - Accel is too low. Set to {qgl_accel}"
#     SET_VELOCITY_LIMIT ACCEL={qgl_accel}
#   {% endif %}
#   _QUAD_GANTRY_LEVEL
#   SET_VELOCITY_LIMIT ACCEL={pre_qgl_accel}

#   {% if target_temp > 0 and store_temp %} #there was target temp before 
#     M104 S{target_temp} T0 
#     RESPOND TYPE=command MSG="[QGL] - {target_temp}c Extruder target restored " 
#   {% endif %}# [gcode_macro CAL_Z]
# description: shortcut for calibrate_z
# gcode:
#   CALIBRATE_Z
#   G28 Z0 
#   G90

# [gcode_macro _Home_Z_]


# [gcode_macro QUAD_GANTRY_LEVEL]
# rename_existing: _QUAD_GANTRY_LEVEL
# variable_qgl_accel = 10000
# variable_store_temp:True
# gcode:
#   {% set target_temp = printer.extruder.target %} 
#   {% set pre_qgl_accel = printer.toolhead.max_accel |int %}
#   RESPOND TYPE=command MSG="[QGL] - Accel before homing = {pre_qgl_accel}"  
#   {% if pre_qgl_accel < qgl_accel %}
#     RESPOND TYPE=command MSG="[QGL] - Accel is too low. Set to {qgl_accel}"
#     SET_VELOCITY_LIMIT ACCEL={qgl_accel}
#   {% endif %}
#   _QUAD_GANTRY_LEVEL
#   SET_VELOCITY_LIMIT ACCEL={pre_qgl_accel}

#   {% if target_temp > 0 and store_temp %} #there was target temp before 
#     M104 S{target_temp} T0 
#     RESPOND TYPE=command MSG="[QGL] - {target_temp}c Extruder target restored " 
#   {% endif %}